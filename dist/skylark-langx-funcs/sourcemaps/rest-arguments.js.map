{"version":3,"sources":["rest-arguments.js"],"names":["define","funcs","restArguments","func","startIndex","length","Math","max","arguments","rest","Array","index","call","this","args","apply"],"mappings":";;;;;;;AAAAA,QACC,WACC,SAASC,GA8BT,OAAOA,EAAMC,cAvBb,SAAuBC,EAAMC,GAE3B,OADAA,EAA2B,MAAdA,EAAqBD,EAAKE,OAAS,GAAKD,EAC9C,WAIL,IAHA,IAAIC,EAASC,KAAKC,IAAIC,UAAUH,OAASD,EAAY,GACjDK,EAAOC,MAAML,GACbM,EAAQ,EACLA,EAAQN,EAAQM,IACrBF,EAAKE,GAASH,UAAUG,EAAQP,GAElC,OAAQA,GACN,KAAK,EAAG,OAAOD,EAAKS,KAAKC,KAAMJ,GAC/B,KAAK,EAAG,OAAON,EAAKS,KAAKC,KAAML,UAAU,GAAIC,GAC7C,KAAK,EAAG,OAAON,EAAKS,KAAKC,KAAML,UAAU,GAAIA,UAAU,GAAIC,GAE7D,IAAIK,EAAOJ,MAAMN,EAAa,GAC9B,IAAKO,EAAQ,EAAGA,EAAQP,EAAYO,IAClCG,EAAKH,GAASH,UAAUG,GAG1B,OADAG,EAAKV,GAAcK,EACZN,EAAKY,MAAMF,KAAMC","file":"../rest-arguments.js","sourcesContent":["define([\r\n\t\"./funcs\"\r\n],function(funcs){\r\n\r\n  // Some functions take a variable number of arguments, or a few expected\r\n  // arguments at the beginning and then a variable number of values to operate\r\n  // on. This helper accumulates all remaining arguments past the function’s\r\n  // argument length (or an explicit `startIndex`), into an array that becomes\r\n  // the last argument. Similar to ES6’s \"rest parameter\".\r\n  function restArguments(func, startIndex) {\r\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\r\n    return function() {\r\n      var length = Math.max(arguments.length - startIndex, 0),\r\n          rest = Array(length),\r\n          index = 0;\r\n      for (; index < length; index++) {\r\n        rest[index] = arguments[index + startIndex];\r\n      }\r\n      switch (startIndex) {\r\n        case 0: return func.call(this, rest);\r\n        case 1: return func.call(this, arguments[0], rest);\r\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\r\n      }\r\n      var args = Array(startIndex + 1);\r\n      for (index = 0; index < startIndex; index++) {\r\n        args[index] = arguments[index];\r\n      }\r\n      args[startIndex] = rest;\r\n      return func.apply(this, args);\r\n    };\r\n  }\r\n\r\n  return funcs.restArguments = restArguments;\t\r\n});"]}